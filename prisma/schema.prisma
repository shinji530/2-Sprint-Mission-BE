// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product {
  id            String     @id @default(uuid())
  ownerId       String
  name          String
  description   String
  price         Int
  tags          String[]
  images        String[]
  favoriteCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  owner         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites     Favorite[]
  comments      Comment[]  @relation("ProductComments")
}

model Article {
  id        String     @id @default(uuid())
  ownerId   String
  title     String
  content   String
  images    String[]
  likeCount Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  comments  Comment[]  @relation("ArticleComments")
}

model Comment {
  id        String   @id @default(uuid())
  writer    User?    @relation(fields: [writerId], references: [id], onDelete: SetNull)
  writerId  String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String? // 실제 foreign key
  productId String? // 실제 foreign key
  article   Article? @relation("ArticleComments", fields: [articleId], references: [id], onDelete: Cascade)
  product   Product? @relation("ProductComments", fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  encryptedPassword String
  nickname          String
  image             String[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  favorites         Favorite[]
  products          Product[]
  articles          Article[]
  comments          Comment[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String?
  articleId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@unique([userId, articleId])
}